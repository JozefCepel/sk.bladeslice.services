<?xml version="1.0" encoding="utf-8"?>
<wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:tns="http://schemas.dcom.sk/integration/bpm/2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702" xmlns:wsaws="http://www.w3.org/2005/08/addressing" xmlns:t="http://docs.oasis-open.org/ws-sx/ws-trust/200512" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" name="bpmService_v2_0" targetNamespace="http://schemas.dcom.sk/integration/bpm/2.0" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsp:Policy xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsaws="http://www.w3.org/2005/08/addressing" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:t="http://docs.oasis-open.org/ws-sx/ws-trust/200512" xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702" wsu:Id="WS2007FederationHttpBinding_IService_policy">
    <wsp:ExactlyOne>
      <wsp:All>
        <sp:TransportBinding>
          <wsp:Policy>
            <sp:TransportToken>
              <wsp:Policy>
                <sp:HttpsToken />
              </wsp:Policy>
            </sp:TransportToken>
            <sp:AlgorithmSuite>
              <wsp:Policy>
                <sp:Basic256 />
              </wsp:Policy>
            </sp:AlgorithmSuite>
            <sp:Layout>
              <wsp:Policy>
                <sp:Lax />
              </wsp:Policy>
            </sp:Layout>
            <sp:IncludeTimestamp />
          </wsp:Policy>
        </sp:TransportBinding>
        <sp:EndorsingSupportingTokens>
          <wsp:Policy>
            <sp:IssuedToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
              <sp:RequestSecurityTokenTemplate>
                <t:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1
                            </t:TokenType>
                <t:KeyType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey</t:KeyType>
                <t:KeySize>256</t:KeySize>
              </sp:RequestSecurityTokenTemplate>
              <wsp:Policy>
                <sp:RequireInternalReference />
              </wsp:Policy>
              <sp:Issuer>
                <wsaws:Address>
                                https://lbsts.intra.dcom.sk:49443/adfs/services/trust/13/certificatetransport
                            </wsaws:Address>
                <wsaws:Metadata xmlns:wsdli="http://www.w3.org/2006/01/wsdl-instance" wsdli:wsdlLocation="http://lbsts.intra.dcom.sk/adfs/services/trust/mex">
                  <wsaw:ServiceName xmlns:stsns="http://docs.oasis-open.org/ws-sx/ws-trust/200512/" EndpointName="CertificateWSTrustBinding_IWSTrust13Async2">
                                    stsns:SecurityTokenService
                                </wsaw:ServiceName>
                </wsaws:Metadata>
              </sp:Issuer>
            </sp:IssuedToken>
          </wsp:Policy>
        </sp:EndorsingSupportingTokens>
        <sp:Wss11>
          <wsp:Policy />
        </sp:Wss11>
        <sp:Trust13>
          <wsp:Policy>
            <sp:MustSupportIssuedTokens />
            <sp:RequireClientEntropy />
            <sp:RequireServerEntropy />
          </wsp:Policy>
        </sp:Trust13>
        <wsaw:UsingAddressing />
      </wsp:All>
    </wsp:ExactlyOne>
  </wsp:Policy>
  <wsdl:types>
    <xs:schema>
      <xs:import schemaLocation="https://lbsoa.intra.dcom.sk/soa/bpm/2.0/bpmService?xsd=bpmService_v2_0.xsd" namespace="http://schemas.dcom.sk/integration/bpm/2.0" />
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="FaultMessage">
    <wsdl:part name="BpmFault" element="tns:BpmFault" />
  </wsdl:message>
  <wsdl:message name="CompleteTaskRequest">
    <wsdl:part name="completeTaskRequest" element="tns:CompleteTaskRequest" />
  </wsdl:message>
  <wsdl:message name="GetProcessInstancesRequest">
    <wsdl:part name="getProcessInstancesRequestDto" element="tns:GetProcessInstancesRequestDto" />
  </wsdl:message>
  <wsdl:message name="SubmitTaskFormResponse" />
  <wsdl:message name="StartProcessInstanceResponse">
    <wsdl:part name="startProcessInstanceResponse" element="tns:StartProcessInstanceResponse" />
  </wsdl:message>
  <wsdl:message name="SendMessageResponse" />
  <wsdl:message name="GetUserAgendaCountRequest">
    <wsdl:part name="userAgendaCountRequestDto" element="tns:UserAgendaCountRequestDto" />
  </wsdl:message>
  <wsdl:message name="SendMessageRequest">
    <wsdl:part name="sendMessageRequest" element="tns:SendMessageRequest" />
  </wsdl:message>
  <wsdl:message name="GetProcessInstancesResponse">
    <wsdl:part name="getProcessInstancesResponseDto" element="tns:GetProcessInstancesResponseDto" />
  </wsdl:message>
  <wsdl:message name="SetAssigneeRequest">
    <wsdl:part name="setAssigneeRequest" element="tns:SetAssigneeRequest" />
  </wsdl:message>
  <wsdl:message name="GetUserAgendaCountResponse">
    <wsdl:part name="userAgendaCountResponseDto" element="tns:UserAgendaCountResponseDto" />
  </wsdl:message>
  <wsdl:message name="GetSingleTaskResponse">
    <wsdl:part name="getSingleTaskResponse" element="tns:GetSingleTaskResponse" />
  </wsdl:message>
  <wsdl:message name="SubmitTaskFormRequest">
    <wsdl:part name="submitTaskFormRequest" element="tns:SubmitTaskFormRequest" />
  </wsdl:message>
  <wsdl:message name="CompleteTaskResponse" />
  <wsdl:message name="GetUserAgendaRequest">
    <wsdl:part name="userAgendaRequestDto" element="tns:UserAgendaRequestDto" />
  </wsdl:message>
  <wsdl:message name="GetUserAgendaResponse">
    <wsdl:part name="userAgendaResponseDto" element="tns:UserAgendaResponseDto" />
  </wsdl:message>
  <wsdl:message name="GetProcessVariablesResponse">
    <wsdl:part name="getProcessVariablesResponse" element="tns:GetProcessVariablesResponse" />
  </wsdl:message>
  <wsdl:message name="GetSingleTaskRequest">
    <wsdl:part name="getSingleTaskRequest" element="tns:GetSingleTaskRequest" />
  </wsdl:message>
  <wsdl:message name="SetAssigneeResponse" />
  <wsdl:message name="StartProcessInstanceRequest">
    <wsdl:part name="startProcessInstanceRequest" element="tns:StartProcessInstanceRequest" />
  </wsdl:message>
  <wsdl:message name="GetProcessVariablesRequest">
    <wsdl:part name="getProcessVariablesRequest" element="tns:GetProcessVariablesRequest" />
  </wsdl:message>
  <wsdl:portType name="BpmServicePortType">
    <wsdl:operation name="SubmitTaskForm">
      <wsdl:documentation>Metoda se liší od CompleteTask pouze v tom:

                - pokud byl task delegován, nedojde k označení že je task hotový (complete) ale vyřešený (resolved)
                - pokud má tak definovaná Form Field Metadata, provede se na backendu v rámci enginu validace
                definovaných atributů


                Při zavolání se z tokenu získá tenantId a Pokud se jej nepodaří získat, služba skončí s chybou.

                Zavolá se metoda Camundy getProcessVariables. Po získání proměnných procesu se zkontoluje, zda obsahuje
                proměnnou tenantId a zda její hodnota odpovídá údaji získaný z tokenu. Pokud ne volání metody skončí s
                chybou.

                Pokud ano, zavolá se stejnojmenná metoda Camudy a dokončí požadovanou úlohu.
            </wsdl:documentation>
      <wsdl:input name="SubmitTaskFormRequest" message="tns:SubmitTaskFormRequest" />
      <wsdl:output name="SubmitTaskFormResponse" message="tns:SubmitTaskFormResponse" />
      <wsdl:fault name="Fault" message="tns:FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="CompleteTask">
      <wsdl:documentation>Při zavolání se z tokenu získá tenantId a Pokud se jej nepodaří získat, služba skončí s
                chybou.

                Zavolá se metoda Camundy getProcessVariables. Po získání proměnných procesu se zkontoluje, zda obsahuje
                proměnnou tenantId a zda její hodnota odpovídá údaji získaný z tokenu. Pokud ne volání metody skončí s
                chybou.

                Pokud ano, zavolá se stejnojmenná metoda Camudy a dokončí požadovanou úlohu.
            </wsdl:documentation>
      <wsdl:input name="CompleteTaskRequest" message="tns:CompleteTaskRequest" />
      <wsdl:output name="CompleteTaskResponse" message="tns:CompleteTaskResponse" />
      <wsdl:fault name="Fault" message="tns:FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="StartProcessInstance">
      <wsdl:documentation>Při startu procesu, se z tokenu získá tenantId a přidá se jako proměnná při volání REST
                Camundy pod názvem tenantId. Pokud se jej nepodaří získat, služba skončí s chybou.

                podle toho jestli je vyplněna v elementu ProcessDefinition hodnota key, nebo id se volá stejnojmenná
                metoda Camundy s id nebo key.
            </wsdl:documentation>
      <wsdl:input name="StartProcessInstanceRequest" message="tns:StartProcessInstanceRequest" />
      <wsdl:output name="StartProcessInstanceResponse" message="tns:StartProcessInstanceResponse" />
      <wsdl:fault name="Fault" message="tns:FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetProcessVariables">
      <wsdl:documentation>Při zavolání se z tokenu získá tenantId a Pokud se jej nepodaří získat, služba skončí s
                chybou.

                Zavolá se stejnojmenná metoda Camundy . Po získání proměnných procesu se zkontoluje, zda obsahuje
                proměnnou tenantId a zda její hodnota odpovídá údaji získaný z tokenu. Pokud ne volání metody skončí s
                chybou.
            </wsdl:documentation>
      <wsdl:input name="GetProcessVariablesRequest" message="tns:GetProcessVariablesRequest" />
      <wsdl:output name="GetProcessVariablesResponse" message="tns:GetProcessVariablesResponse" />
      <wsdl:fault name="Fault" message="tns:FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetSingleTask">
      <wsdl:documentation>Při zavolání se z tokenu získá tenantId a Pokud se jej nepodaří získat, služba skončí s
                chybou.

                Zavolá se metoda Camundy getProcessVariables. Po získání proměnných procesu se zkontoluje, zda obsahuje
                proměnnou tenantId a zda její hodnota odpovídá údaji získaný z tokenu. Pokud ne volání metody skončí s
                chybou.

                Pokud ano, zavolá se stejnojmenná metoda Camudy a vrátí výsledek volání.
            </wsdl:documentation>
      <wsdl:input name="GetSingleTaskRequest" message="tns:GetSingleTaskRequest" />
      <wsdl:output name="GetSingleTaskResponse" message="tns:GetSingleTaskResponse" />
      <wsdl:fault name="Fault" message="tns:FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="SetAssignee">
      <wsdl:documentation>Při zavolání se z tokenu získá tenantId a Pokud se jej nepodaří získat, služba skončí s
                chybou.

                Zavolá se metoda Camundy getProcessVariables. Po získání proměnných procesu se zkontoluje, zda obsahuje
                proměnnou tenantId a zda její hodnota odpovídá údaji získaný z tokenu. Pokud ne volání metody skončí s
                chybou.

                Ověří se, že uživatel s daným userId má pro daného tenanta oprávnění bpm_clerk. Pokud ne skončí volání s
                chybou, že není možné úlohu přiřadit dané osobě, protože nemá přístup do denní agendy.

                Pokud ano, zavolá se stejnojmenná metoda Camudy a nastaví se řešitel úlohy.
            </wsdl:documentation>
      <wsdl:input name="SetAssigneeRequest" message="tns:SetAssigneeRequest" />
      <wsdl:output name="SetAssigneeResponse" message="tns:SetAssigneeResponse" />
      <wsdl:fault name="Fault" message="tns:FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="SendMessage">
      <wsdl:documentation>Zavolá se metoda Camundy message.</wsdl:documentation>
      <wsdl:input name="SendMessageRequest" message="tns:SendMessageRequest" />
      <wsdl:output name="SendMessageResponse" message="tns:SendMessageResponse" />
      <wsdl:fault name="Fault" message="tns:FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetUserAgenda">
      <wsdl:input name="GetUserAgendaRequest" message="tns:GetUserAgendaRequest" />
      <wsdl:output name="GetUserAgendaResponse" message="tns:GetUserAgendaResponse" />
      <wsdl:fault name="Fault" message="tns:FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetProcessInstances">
      <wsdl:input name="GetProcessInstancesRequest" message="tns:GetProcessInstancesRequest" />
      <wsdl:output name="GetProcessInstancesResponse" message="tns:GetProcessInstancesResponse" />
      <wsdl:fault name="Fault" message="tns:FaultMessage" />
    </wsdl:operation>
    <wsdl:operation name="GetUserAgendaCount">
      <wsdl:input name="GetUserAgendaCountRequest" message="tns:GetUserAgendaCountRequest" />
      <wsdl:output name="GetUserAgendaCountResponse" message="tns:GetUserAgendaCountResponse" />
      <wsdl:fault name="Fault" message="tns:FaultMessage" />
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="BpmServiceBinding" type="tns:BpmServicePortType">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" />
    <PolicyReference xmlns="http://schemas.xmlsoap.org/ws/2004/09/policy" URI="#WS2007FederationHttpBinding_IService_policy" />
    <wsdl:operation name="GetUserAgendaCount">
      <soap:operation soapAction="http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue" style="document" />
      <wsdl:input name="GetUserAgendaCountRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="GetUserAgendaCountResponse">
        <soap:body use="literal" />
      </wsdl:output>
      <wsdl:fault name="Fault">
        <soap:fault use="literal" name="Fault" namespace="" />
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetProcessInstances">
      <soap:operation soapAction="http://schemas.dcom.sk/integration/bpm/GetProcessInstances" style="document" />
      <soap:operation soapAction="" style="document" />
      <wsdl:input name="GetProcessInstancesRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="GetProcessInstancesResponse">
        <soap:body use="literal" />
      </wsdl:output>
      <wsdl:fault name="Fault">
        <soap:fault use="literal" name="Fault" namespace="" />
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetUserAgenda">
      <soap:operation soapAction="http://schemas.dcom.sk/integration/bpm/GetUserAgenda" style="document" />
      <soap:operation soapAction="" style="document" />
      <wsdl:input name="GetUserAgendaRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="GetUserAgendaResponse">
        <soap:body use="literal" />
      </wsdl:output>
      <wsdl:fault name="Fault">
        <soap:fault use="literal" name="Fault" namespace="" />
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetProcessVariables">
      <wsdl:documentation>Při zavolání se z tokenu získá tenantId a Pokud se jej nepodaří získat, služba skončí s
                chybou.

                Zavolá se stejnojmenná metoda Camundy . Po získání proměnných procesu se zkontoluje, zda obsahuje
                proměnnou tenantId a zda její hodnota odpovídá údaji získaný z tokenu. Pokud ne volání metody skončí s
                chybou.
            </wsdl:documentation>
      <soap:operation soapAction="http://schemas.dcom.sk/integration/bpm/GetProcessVariables" style="document" />
      <soap:operation soapAction="" style="document" />
      <wsdl:input name="GetProcessVariablesRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="GetProcessVariablesResponse">
        <soap:body use="literal" />
      </wsdl:output>
      <wsdl:fault name="Fault">
        <soap:fault use="literal" name="Fault" namespace="" />
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="StartProcessInstance">
      <wsdl:documentation>Při startu procesu, se z tokenu získá tenantId a přidá se jako proměnná při volání REST
                Camundy pod názvem tenantId. Pokud se jej nepodaří získat, služba skončí s chybou.

                podle toho jestli je vyplněna v elementu ProcessDefinition hodnota key, nebo id se volá stejnojmenná
                metoda Camundy s id nebo key.
            </wsdl:documentation>
      <soap:operation soapAction="http://schemas.dcom.sk/integration/bpm/StartProcessInstance" style="document" />
      <soap:operation soapAction="" style="document" />
      <wsdl:input name="StartProcessInstanceRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="StartProcessInstanceResponse">
        <soap:body use="literal" />
      </wsdl:output>
      <wsdl:fault name="Fault">
        <soap:fault use="literal" name="Fault" namespace="" />
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="CompleteTask">
      <wsdl:documentation>Při zavolání se z tokenu získá tenantId a Pokud se jej nepodaří získat, služba skončí s
                chybou.

                Zavolá se metoda Camundy getProcessVariables. Po získání proměnných procesu se zkontoluje, zda obsahuje
                proměnnou tenantId a zda její hodnota odpovídá údaji získaný z tokenu. Pokud ne volání metody skončí s
                chybou.

                Pokud ano, zavolá se stejnojmenná metoda Camudy a dokončí požadovanou úlohu.
            </wsdl:documentation>
      <soap:operation soapAction="" style="document" />
      <soap:operation soapAction="http://schemas.dcom.sk/integration/bpm/CompleteTask" style="document" />
      <wsdl:input name="CompleteTaskRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="CompleteTaskResponse">
        <soap:body use="literal" />
      </wsdl:output>
      <wsdl:fault name="Fault">
        <soap:fault use="literal" name="Fault" namespace="" />
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="SubmitTaskForm">
      <wsdl:documentation>Metoda se liší od CompleteTask pouze v tom:

                - pokud byl task delegován, nedojde k označení že je task hotový (complete) ale vyřešený (resolved)
                - pokud má tak definovaná Form Field Metadata, provede se na backendu v rámci enginu validace
                definovaných atributů


                Při zavolání se z tokenu získá tenantId a Pokud se jej nepodaří získat, služba skončí s chybou.

                Zavolá se metoda Camundy getProcessVariables. Po získání proměnných procesu se zkontoluje, zda obsahuje
                proměnnou tenantId a zda její hodnota odpovídá údaji získaný z tokenu. Pokud ne volání metody skončí s
                chybou.

                Pokud ano, zavolá se stejnojmenná metoda Camudy a dokončí požadovanou úlohu.
            </wsdl:documentation>
      <soap:operation soapAction="" style="document" />
      <soap:operation soapAction="http://schemas.dcom.sk/integration/bpm/SubmitTaskForm" style="document" />
      <wsdl:input name="SubmitTaskFormRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="SubmitTaskFormResponse">
        <soap:body use="literal" />
      </wsdl:output>
      <wsdl:fault name="Fault">
        <soap:fault use="literal" name="Fault" namespace="" />
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="SetAssignee">
      <wsdl:documentation>Při zavolání se z tokenu získá tenantId a Pokud se jej nepodaří získat, služba skončí s
                chybou.

                Zavolá se metoda Camundy getProcessVariables. Po získání proměnných procesu se zkontoluje, zda obsahuje
                proměnnou tenantId a zda její hodnota odpovídá údaji získaný z tokenu. Pokud ne volání metody skončí s
                chybou.

                Ověří se, že uživatel s daným userId má pro daného tenanta oprávnění bpm_clerk. Pokud ne skončí volání s
                chybou, že není možné úlohu přiřadit dané osobě, protože nemá přístup do denní agendy.

                Pokud ano, zavolá se stejnojmenná metoda Camudy a nastaví se řešitel úlohy.
            </wsdl:documentation>
      <soap:operation soapAction="" style="document" />
      <soap:operation soapAction="http://schemas.dcom.sk/integration/bpm/SetAssignee" style="document" />
      <wsdl:input name="SetAssigneeRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="SetAssigneeResponse">
        <soap:body use="literal" />
      </wsdl:output>
      <wsdl:fault name="Fault">
        <soap:fault use="literal" name="Fault" namespace="" />
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="GetSingleTask">
      <wsdl:documentation>Při zavolání se z tokenu získá tenantId a Pokud se jej nepodaří získat, služba skončí s
                chybou.

                Zavolá se metoda Camundy getProcessVariables. Po získání proměnných procesu se zkontoluje, zda obsahuje
                proměnnou tenantId a zda její hodnota odpovídá údaji získaný z tokenu. Pokud ne volání metody skončí s
                chybou.

                Pokud ano, zavolá se stejnojmenná metoda Camudy a vrátí výsledek volání.
            </wsdl:documentation>
      <soap:operation soapAction="" style="document" />
      <soap:operation soapAction="http://schemas.dcom.sk/integration/bpm/GetSingleTask" style="document" />
      <wsdl:input name="GetSingleTaskRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="GetSingleTaskResponse">
        <soap:body use="literal" />
      </wsdl:output>
      <wsdl:fault name="Fault">
        <soap:fault use="literal" name="Fault" namespace="" />
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="SendMessage">
      <wsdl:documentation>Zavolá se metoda Camundy message.</wsdl:documentation>
      <soap:operation soapAction="http://schemas.dcom.sk/integration/bpm/SendMessage" style="document" />
      <soap:operation soapAction="" style="document" />
      <wsdl:input name="SendMessageRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="SendMessageResponse">
        <soap:body use="literal" />
      </wsdl:output>
      <wsdl:fault name="Fault">
        <soap:fault use="literal" name="Fault" namespace="" />
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="BpmService">
    <wsdl:port name="BpmServicePort" binding="tns:BpmServiceBinding">
      <soap:address location="https://lbsoa.intra.dcom.sk/soa/bpm/2.0/bpmService" />
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>